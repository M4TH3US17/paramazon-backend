-- 1. ENUMS
CREATE TYPE status_type_enum AS ENUM ('ACTIVE', 'INACTIVE');
CREATE TYPE media_type_enum  AS ENUM ('IMAGE', 'VIDEO');
CREATE TYPE role_type_enum   AS ENUM ('ROLE_ADMIN', 'ROLE_USER', 'ROLE_SINGER');

-- 2. TABELAS E FUNCOES AUXILIARES

-- 2.1 is_singer (FUNCAO QUE VERIFICA SE O USUARIO EH UM CANTOR)
CREATE FUNCTION is_singer(id_user BIGINT) RETURNS BOOLEAN AS $$
DECLARE
    ROLE_ID   BIGINT;
BEGIN
    ROLE_ID = (SELECT role_id FROM usuario_role WHERE user_id = id_user);

	RETURN ROLE_ID = (SELECT id FROM role WHERE name = 'ROLE_SINGER');
END; $$ LANGUAGE plpgsql;

-- 2.2 MEDIA (ARMAZENA IMAGENS E VIDEOS)
CREATE TABLE media (
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    s3_key      VARCHAR(255)                            NOT NULL,
    type        MEDIA_TYPE_ENUM                         NOT NULL,
    upload_date DATE DEFAULT CURRENT_DATE               NOT NULL,
    CONSTRAINT pk_media PRIMARY KEY (id)
);

-- 2.3 VALIDATION EMAIL (CERTIFICA SE O EMAIL DO USUARIO REALMENTE EH DELE)
CREATE TABLE validation_email (
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email             VARCHAR(255)                            NOT NULL,
	verification_code INTEGER                                 NOT NULL,
	is_confirmed      BOOLEAN DEFAULT FALSE                   NOT NULL,
	CONSTRAINT pk_validation_email PRIMARY KEY (id),
    CONSTRAINT uc_email UNIQUE (email)
);

-- 3. USER (DDL)
CREATE TABLE "user" (
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    username          VARCHAR(255)                            NOT NULL,
    password          VARCHAR(255)                            NOT NULL,
    email_id          BIGINT                                  NOT NULL,
    create_date       DATE DEFAULT CURRENT_DATE                   NULL,
    media_id          BIGINT                                      NULL,
    status            STATUS_TYPE_ENUM                        NOT NULL,
	CONSTRAINT pk_user          PRIMARY KEY (id),
    CONSTRAINT uc_user_username UNIQUE (username),
	CONSTRAINT fk_user_on_media FOREIGN KEY (media_id) REFERENCES media (id),
	CONSTRAINT fk_user_on_validation_email FOREIGN KEY (email_id) REFERENCES validation_email (id)
);

-- 3.1 ROLE (NIVEIS DE USUARIO - CANTOR, ADMINISTRADOR OU USUARIO PADRAO.)
CREATE TABLE role (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name       ROLE_TYPE_ENUM DEFAULT 'ROLE_USER'      NOT NULL,
    CONSTRAINT pk_role PRIMARY KEY (id)
);

-- 3.2 USER_ROLE (USUARIO PODE TER VARIAS NIVEIS)
CREATE TABLE user_role (
    role_id    BIGINT       NOT NULL,
    user_id    BIGINT       NOT NULL,
	CONSTRAINT pk_user_role         PRIMARY KEY (user_id, role_id),
	CONSTRAINT fk_user_role_on_user FOREIGN KEY (user_id) REFERENCES "user" (id),
	CONSTRAINT fk_user_role_on_role FOREIGN KEY (role_id) REFERENCES role (id)
);

-- 4. MUSIC (DDL)
CREATE TABLE music (
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	name              VARCHAR(255)                            NOT NULL,
    status            STATUS_TYPE_ENUM                        NOT NULL,
	style             VARCHAR(60)                             NOT NULL,
	CONSTRAINT pk_music PRIMARY KEY (id)
);

-- 5. BAND (DDL)
CREATE TABLE band (
    id                BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	name              VARCHAR(255)                            NOT NULL,
    media_id          BIGINT                                      NULL,
    status            STATUS_TYPE_ENUM                        NOT NULL,
	total_payment     NUMERIC(10, 2) DEFAULT 0.00             NOT NULL,
	description       VARCHAR(255)                                NULL,
    create_date       DATE DEFAULT CURRENT_DATE                   NULL,
	CONSTRAINT pk_band          PRIMARY KEY (id),
	CONSTRAINT fk_band_on_media FOREIGN KEY (media_id) REFERENCES media(id)
);

-- 5.1 BAND PODE TER MUITOS USERS (ROLE_TYPE_ENUM = 'ROLE_SINGER'), ASSIM COMO MUITOS USERS PODEM PERTENCER A MUITAS BANDS
CREATE TABLE band_singer (
	band_id   BIGINT                      NOT NULL,
	user_id   BIGINT                      NOT NULL CHECK (is_singer(user_id)),
	payment   NUMERIC(10, 2) DEFAULT 0.00 NOT NULL,
	CONSTRAINT pk_band_user         PRIMARY KEY (band_id, user_id),
	CONSTRAINT fk_band_user_on_band FOREIGN KEY (band_id) REFERENCES band (id),
    CONSTRAINT fk_band_user_on_user FOREIGN KEY (user_id) REFERENCES "user" (id)
);

-- 5.2 BAND PODE TER MUITAS MUSICAS
CREATE TABLE band_playlist (
	band_id  BIGINT NOT NULL,
	music_id BIGINT NOT NULL,
	CONSTRAINT pk_band_playlist          PRIMARY KEY (band_id, music_id),
	CONSTRAINT fk_band_playlist_on_band  FOREIGN KEY (band_id) REFERENCES band (id),
	CONSTRAINT fk_band_playlist_on_music FOREIGN KEY (music_id) REFERENCES music (id)
);

-- 5.3 USER PREFERENCES (USUARIO ESCOLHE QUAIS BANDAS PREFERE. COM ISSO, SERA ALERTADO QND HOUVER SHOW DESSA BANDA)
CREATE TABLE user_preference (
	user_id BIGINT NOT NULL,
	band_id BIGINT NOT NULL,
	CONSTRAINT pk_user_preference         PRIMARY KEY (user_id, band_id),
	CONSTRAINT fk_user_preference_on_user FOREIGN KEY (user_id) REFERENCES "user" (id),
	CONSTRAINT fk_user_preference_on_band FOREIGN KEY (band_id) REFERENCES band (id)
);

-- 6. PRESENTATION (DDL)
CREATE TABLE presentation (
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY,
    status             STATUS_TYPE_ENUM                       NOT NULL,
	band_id            BIGINT                                 NOT NULL,
    media_id           BIGINT                                     NULL,
    start_presentation TIME                                       NULL,
    end_presentation   TIME                                       NULL,
	description        VARCHAR(255)                               NULL,
	CONSTRAINT pk_presentation          PRIMARY KEY (id),
	CONSTRAINT fk_presentation_on_band  FOREIGN KEY (band_id)  REFERENCES band (id),
	CONSTRAINT fk_presentation_on_media FOREIGN KEY (media_id) REFERENCES media(id)
);

-- 7. SHOW (DDL)
CREATE TABLE show (
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY,
    date    DATE                                    NOT NULL,
    status  STATUS_TYPE_ENUM                        NOT NULL,
	budget   NUMERIC(10, 2) DEFAULT 0.00            NOT NULL,
    CONSTRAINT uc_show_date UNIQUE (date),
	CONSTRAINT pk_show PRIMARY KEY (id)
);

-- 7.1 UM SHOW PODE TER MUITAS PRESENTATIONS
CREATE TABLE show_presentation (
    show_id              BIGINT NOT NULL,
    presentation_id      BIGINT NOT NULL,
    CONSTRAINT pk_show_presentation                 PRIMARY KEY (show_id, presentation_id),
    CONSTRAINT fk_show_presentation_on_show         FOREIGN KEY (show_id) REFERENCES show (id),
    CONSTRAINT fk_show_presentation_on_presentation FOREIGN KEY (presentation_id) REFERENCES presentation (id)
);

-- 8. PRESENTATION_VOTE (DDL)
CREATE TABLE presentation_vote (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY  NOT NULL,
    presentation_id      BIGINT                 NOT NULL,
    votes                INTEGER                NOT NULL,
    status               STATUS_TYPE_ENUM       NOT NULL,
    CONSTRAINT pk_presentation_vote                 PRIMARY KEY (id),
    CONSTRAINT fk_presentation_vote_on_presentation FOREIGN KEY (presentation_id) REFERENCES presentation (id)
);

-- 9. SHOW VOTE (DDL)
CREATE TABLE show_vote (
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	total_votes  INTEGER DEFAULT 0                       NOT NULL,
    start_voting TIMESTAMP DEFAULT CURRENT_TIMESTAMP     NOT NULL,
    end_voting   TIMESTAMP                               NOT NULL,
    status       STATUS_TYPE_ENUM                        NOT NULL,
    CONSTRAINT pk_show_vote PRIMARY KEY (id)
);

-- 9.1 SHOW VOTE PODE TER MUITOS PRESENTATION_VOTES
CREATE TABLE show_vote_presentation_vote (
    show_vote_id              BIGINT NOT NULL,
    presentation_vote_id      BIGINT NOT NULL,
    CONSTRAINT pk_show_vote_presentation_vote                      PRIMARY KEY (show_vote_id, presentation_vote_id),
    CONSTRAINT fk_show_vote_presentation_vote_on_show_vote         FOREIGN KEY (show_vote_id) REFERENCES show_vote (id),
    CONSTRAINT fk_show_vote_presentation_vote_on_presentation_vote FOREIGN KEY (presentation_vote_id) REFERENCES presentation_vote (id)
);